from typing import Union

import logging
from datetime import datetime, timedelta

from aiogram import types
from aiogram.types import CallbackQuery, Message
from keyboards.inline.inkb_main_menu import main_menu_keyboard
from keyboards.inline.inkb_event import ink_event_card
from keyboards.inline.subscriptions_menu import categories_keyboard
from utils.db_api.db_comands import get_date_end, get_date_start, get_what_now

from loader import dp
from data import config




async def main_menu_category(message: Union[CallbackQuery, Message], **kwargs):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–æ—Ç–∞

    Args:
        message (Union[CallbackQuery, Message]): [description]
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = main_menu_keyboard(**kwargs)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞ —Ç–∏–ø –∞–ø–¥–µ–π—Ç–∞. –ï—Å–ª–∏ Message - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if isinstance(message, Message):
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)
    # –ï—Å–ª–∏ CallbackQuery - –∏–∑–º–µ–Ω—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.answer(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)


@dp.message_handler(commands=['–ú–µ–Ω—é', 'menu'], commands_prefix = ['‚†Ä','/'])
async def show_main_menu(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –º–µ–Ω—é, –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    await main_menu_category(message)


@dp.callback_query_handler(text_contains="what_now")
async def show_what_now(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–µ—Ç –í–°–ï —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    tdate = datetime.now() + timedelta(hours=config.DELTA)

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω—Ü–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    festival_start = get_date_start()
    festival_end = get_date_end()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—Å—è/–∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate < festival_start:
        await call.message.answer("üòÅ –§–µ—Å—Ç–∏–≤–∞–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, \n–ó–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞ 18 –∏—é–Ω—è!")
    elif tdate > festival_end:
        await call.message.answer(
            text="‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ")
    else:
        await call.message.answer(text='ü§ì –°–µ–π—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç ü§ì')
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        event_now_list = get_what_now(tdate)
        for event in event_now_list:
            #TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è. –∫–Ω–æ–ø–∫–∏ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è|–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –ø–æ–¥—Ä–æ–±–Ω–µ–µ
            await call.message.answer(text=event['name'], reply_markup=ink_event_card)


@dp.callback_query_handler(text_contains="what_next")
async def show_what_next(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å 2-–º—è –±–ª–∏–∂–∞–π—à–∏–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ (–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –Ω–∏—Ö –æ—Å—Ç–∞–ª–æ—Å—å)
    """
    pass


@dp.callback_query_handler(text_contains="full_shedule")
async def show_full_schedule(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Å –ø–æ–ª–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    pass


@dp.callback_query_handler(text_contains="map")
async def show_map(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∫–∞—Ä—Ç–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    pass


@dp.callback_query_handler(text_contains="share")
async def show_share(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –≤ –≤–∏–¥–µ QR-–∫–æ–¥–∞ —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –±–æ—Ç–∞
    """
    pass


@dp.callback_query_handler(text_contains="about")
async def show_about(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã–º —Ñ–∞–π–ª–æ–º "–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"
    """
    pass
