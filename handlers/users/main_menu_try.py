
@dp.callback_query_handler(text_contains='back_to_main')
async def back_main_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    await call.message.answer(
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_menu_keyboard())


@dp.callback_query_handler(text_contains="back_to_result")
async def back_to_result_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'

    """
    pass


@dp.callback_query_handler(text_contains="back_to_event")
async def back_to_event_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª '–ö–æ–Ω–∫—É—Ä—Å—ã'
    """
    pass


@dp.callback_query_handler(text_contains="back_to_team")
async def back_to_team_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ '–ö–æ–º–∞–Ω–¥—ã'
    """
    pass


@dp.callback_query_handler(text_contains="back_to_subscriptions_manager")
async def back_to_subscriptions_manager_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–¥–µ–ª '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫'
    """
    pass


@dp.callback_query_handler(text_contains="what_now")
async def show_what_now(call: types.CallbackQuery):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    TODO: –∑–∞–º–µ–Ω–∏—Ç—å tdate
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    # tdate = datetime.now() + timedelta(hours=config.DELTA)
    tdate = datetime(2021, 7, 18, 19, 29) + timedelta(hours=config.DELTA)
    dt_start = get_date_start()
    dt_end = get_date_end()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate < dt_start:
        await call.message.answer(
            text="üòÅ –§–µ—Å—Ç–∏–≤–∞–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, \n–ó–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞ 18 –∏—é–Ω—è!"
            )
    elif tdate > dt_end:
        await call.message.answer(
            text="‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ"
            )
    else:
        await call.message.answer(
            text='ü§ì –°–µ–π—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç ü§ì'
            )
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        events_list = get_what_now(tdate)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –º–µ—Ä–æ–ø–∏—Ä–∏—è—Ç–∏—è —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(events_list) == 0:
            await call.message.answer(
                text="–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.\n"
                "–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–∫–ø—É"
                # TODO: –î–æ–≤–∞–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–ø–∫–æ–π what_next
            )
        else:
            for event in events_list:
                # –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                event_name = event['name']
                time_end = event['event_time_end'].strftime('%H:%M')
                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—É—Ä—Å–µ
                await call.message.answer(
                    text=f"–°–∞–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—É—Ä—Å '{event_name}'\n"
                    f"–û–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –≤ {time_end}"
                    )


@dp.callback_query_handler(text_contains="what_next")
async def show_what_next(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é show_what_next. –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç?
    TODO: –∑–∞–º–µ–Ω–∏—Ç—å tdate
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –∞ —Ç–∞–∫ –∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    # tdate = datetime.now() + timedelta(hours=config.DELTA)
    tdate = datetime(2021, 7, 18, 19, 29) + timedelta(hours=config.DELTA)
    dt_end = get_date_end()
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate >= dt_end:
        await call.message.answer(
            text="‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ"
            )
    else:
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        events_list = get_what_next(tdate)
        await call.message.answer("–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Å—Ç–æ–∏—Ç—Å—è")
        # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        for event in events_list:
            await call.message.answer(
                                    f"'{event['name']}'\n"
                                    f"–ö–æ–Ω–∫—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è "
                                    f"{event['event_time_start'].strftime('%d.%m')} "
                                    f"–≤ {event['event_time_start'].strftime('%H:%M')}")


@dp.callback_query_handler(text_contains="full_schedule")
async def show_full_schedule(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    full_schedule = get_full_shedule()
    await call.message.answer("–í–æ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")
    for event in full_schedule:
        await call.message.answer(f"{event['name']}"
                                f"\n–ù–∞—á–∞–ª–æ:{event['time_start'].strftime('%d.%m %H:%M')}"
                                f"\n–ö–æ–Ω–µ—Ü:{event['time_end'].strftime('%d.%m %H:%M')}\n\n")


@dp.callback_query_handler(text_contains="results")
async def show_results_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä category
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–±—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        reply_markup= await result_keyboard(category))


@dp.callback_query_handler(text_contains="contests")
async def show_contests_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    await call.message.answer("–í—ã–±–∏—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ–Ω–∫—É—Ä—Å", reply_markup=inkb_contests_menu)


@dp.callback_query_handler(text_contains="subscriptions")
async def show_subscriptions_menu(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    await subscriptions_categories(call)

@dp.callback_query_handler(text_contains="map")
async def show_map(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–µ–∞—Ä—Ç—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–∞—Ä—Ç–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    await call.message.answer("–í–æ—Ç –∫–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è")


@dp.callback_query_handler(text_contains="share")
async def show_share(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ —Å–æ —Å—ã–ª–∫–æ–π –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç
    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å QR-–∫–æ–¥–æ–º
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    await call.message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞")


@dp.callback_query_handler(text_contains="about")
async def show_about(call: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """
    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")
    await call.message.answer("–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –°–≤–∞—Ä–æ–æ–≥2022")
