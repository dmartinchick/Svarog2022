from aiogram import types
from aiogram.types.user import User
from utils.db_api.sqlighter import SQL

from loader import dp
import logging
from data import config

@dp.callback_query_handler(text_contains='subscriptions:team_subs')
async def show_team_subs(call: types.CallbackQuery):

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    message_user = User.get_current()['id']
    rq = SQL.get_team_subs(message_user)
    print(len(rq))
    if len(rq) == 0:
        await call.message.answer(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.")
    else:
        await call.message.answer(text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:")
        for row in rq:
            await call.message.answer(text="üëâ " + row[0])


@dp.callback_query_handler(text_contains='subscriptions:event_subs')
async def show_event_subs(call: types.CallbackQuery):

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info(f"{callback_data=}")

    message_user = User.get_current()['id']
    rq = SQL.get_event_subs(message_user)
    print(len(rq))
    if len(rq) == 0:
        await call.message.answer(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–∏–Ω –∫–æ–Ω–∫—É—Ä—Å.")
    else:
        await call.message.answer(text="–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω–∫—É—Ä—Å—ã:")
        for row in rq:
            await call.message.answer(text="üëâ " + row[0])
