"""–•—ç–Ω–¥–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é"""
from datetime import datetime, timedelta
import logging
from typing import Union

from aiogram import types

# –ü–æ–¥–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
from utils.db_api.db_comands import get_date_start, get_date_end, \
    get_event_info, get_full_shedule, \
        get_team_info, get_what_next, \
            get_what_now, set_sign_to_event, \
                set_sign_to_team, set_unsing_to_event, \
                    set_unsing_to_team

#–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from keyboards.inline.inline_main_menu import event_keyboard, main_menu_keyboard, \
    result_keyboard, subscriptions_manager_keyboard, sm_item_keyboard, team_keyboard
from keyboards.inline.callback_datas import main_menu_cb

from loader import dp
from data import config

@dp.message_handler(commands=['–ú–µ–Ω—é', 'menu'], commands_prefix = ['‚†Ä','/'])
async def show_main_menu(
    message: Union[types.Message, types.CallbackQuery],
    **kwargs # pylint: disable=unused-argument
    ):

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """

    markup = await main_menu_keyboard()

    if isinstance(message, types.Message):
        await message.answer(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=markup
        )
    elif isinstance(message, types.CallbackQuery):
        call = message
        await call.message.answer(
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=markup
        )


async def show_what_now(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
    TODO: –∑–∞–º–µ–Ω–∏—Ç—å tdate
    TODO: –î–æ–≤–∞–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–ø–∫–æ–π what_next –≤ –≤–µ—Ç–∫—É if len(events_list) == 0
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç–∞
    # tdate = datetime.now() + timedelta(hours=config.DELTA)
    tdate = datetime(2021, 7, 18, 19, 29) + timedelta(hours=config.DELTA)
    dt_start = get_date_start()
    dt_end = get_date_end()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate < dt_start:
        await call.message.answer(
            text="üòÅ –§–µ—Å—Ç–∏–≤–∞–ª—å –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è, \n–ó–∞–≥–ª—è–Ω–∏ —Å—é–¥–∞ 18 –∏—é–Ω—è!"
            )
    elif tdate > dt_end:
        await call.message.answer(
            text="‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ"
            )
    else:
        await call.message.answer(
            text='ü§ì –°–µ–π—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç ü§ì'
            )
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        events_list = get_what_now(tdate)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ –º–µ—Ä–æ–ø–∏—Ä–∏—è—Ç–∏—è —Å–µ–π—á–∞—Å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(events_list) == 0:
            await call.message.answer(
                text="–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.\n"
                "–ú–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–∫–ø—É"
            )
        else:
            for event in events_list:
                # –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
                event_name = event['name']
                time_end = event['event_time_end'].strftime('%H:%M')
                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—É—Ä—Å–µ
                await call.message.answer(
                    text=f"–°–∞–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç –∫–æ–Ω–∫—É—Ä—Å '{event_name}'\n"
                    f"–û–Ω –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –≤ {time_end}"
                    )


async def show_what_next(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
    TODO: ????–¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç
    TODO: –∑–∞–º–µ–Ω–∏—Ç—å tdate
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏, –∞ —Ç–∞–∫ –∂–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    # tdate = datetime.now() + timedelta(hours=config.DELTA)
    tdate = datetime(2021, 7, 18, 19, 29) + timedelta(hours=config.DELTA)
    dt_end = get_date_end()

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å
    if tdate >= dt_end:
        await call.message.answer(
            text="‚òπ –ö —Å–æ–∂–µ–ª–µ–Ω–∏—é, —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª.\n–£–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É! üòÅ"
            )
    else:
        # –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ë–î –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
        events_list = get_what_next(tdate)
        await call.message.answer("–í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Å—Ç–æ–∏—Ç—Å—è")
        # –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π
        for event in events_list:
            await call.message.answer(
                                    f"'{event['name']}'\n"
                                    f"–ö–æ–Ω–∫—É—Ä—Å –Ω–∞—á–Ω–µ—Ç—Å—è "
                                    f"{event['event_time_start'].strftime('%d.%m')} "
                                    f"–≤ {event['event_time_start'].strftime('%H:%M')}")


async def show_full_schedule(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    TODO: –û—Ñ—Ä–º–∏—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    full_schedule = get_full_shedule()

    await call.message.answer("–í–æ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")

    for event in full_schedule:
        await call.message.answer(f"{event['name']}"
                                f"\n–ù–∞—á–∞–ª–æ:{event['time_start'].strftime('%d.%m %H:%M')}"
                                f"\n–ö–æ–Ω–µ—Ü:{event['time_end'].strftime('%d.%m %H:%M')}\n\n")


async def show_result_menu(
    call: types.CallbackQuery,
    category,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    markup = await result_keyboard(category)

    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É–±–æ–∫",
        reply_markup=markup
    )


async def show_festival_cup_result(
    call:types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ –§–µ—Å—Ç–∏–≤–∞–ª—è

    Args:
        call (types.CallbackQuery): callback_data  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer(
        text="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∫–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è"
    )


async def show_holding_cup_result(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ —Ö–æ–ª–¥–∏–Ω–≥–∞

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer(
        text="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∫–∞ —Ö–æ–¥–∏–Ω–≥–∞"
    )


async def show_tourism_cup_result(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ —Ç—É—Ä–∏–∑–º–∞

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer(
        text="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∫–∞ —Ç—É—Ä–∏–∑–º–∞"
    )


async def show_sport_cup_result(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ —Å–ø–æ—Ä—Ç–∞

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer(
        text="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∫–∞ —Ç—É—Ä–∏–∑–º–∞"
    )


async def show_culture_cup_result(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer(
        text="–í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã"
    )


async def show_event_menu(
    call: types.CallbackQuery,
    category,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–æ–≤

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    markup = await event_keyboard(category)

    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ–Ω–∫—É—Ä—Å",
        reply_markup=markup
    )


async def show_team_menu(
    call: types.CallbackQuery,
    category,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –∫–æ–º–∞–Ω–¥

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    markup = await team_keyboard(category)

    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–æ–º–∞–Ω–¥—É",
        reply_markup=markup
    )


async def show_subscriptions_manager_menu(
    call: types.CallbackQuery,
    category,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫

    Args:
        call (types.CallbackQuery): callbcak_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    markup = await subscriptions_manager_keyboard(category)

    await call.message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã —Ö–æ—Ç–µ –ª–∏ –±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å",
        reply_markup=markup
    )


async def show_subscriptions_manager_team(
    call: types.CallbackQuery,
    category,
    subcategory
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω/ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        subcategory ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è

    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    user_id = call.from_user.id

    markup = await sm_item_keyboard(category, subcategory, user_id)

    await call.message.answer(
        text="–ö–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º ‚úÖ\n"
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã, "
            "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ–º",
        reply_markup=markup
    )



async def show_subscriptions_manager_event(
    call: types.CallbackQuery,
    category,
    subcategory
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω/ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        subcategory ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è

    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    user_id = call.from_user.id
    markup = await sm_item_keyboard(category, subcategory, user_id)

    await call.message.answer(
        text="–ö–æ–Ω–∫—É—Ä—Å—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø–æ–º–µ—á–µ–Ω—ã —Å–∏–º–≤–æ–ª–æ–º ‚úÖ\n"
            "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ –±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∫–æ–º–∞–Ω–¥—ã, "
            "–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –µ—ë –Ω–∞–∑–≤–∞–Ω–∏–µ–º",
        reply_markup=markup
    )


async def show_map(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç—É —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –∫–∞—Ä—Ç–æ–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer("–í–æ—Ç –∫–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è")


async def show_share(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é QR-–∫–æ–¥ —Å–æ —Å—ã–ª–∫–æ–π –Ω–∞ —ç—Ç–æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å QR-–∫–æ–¥–æ–º
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer("–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞")


async def show_about(
    call: types.CallbackQuery,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞ —Å –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—è
    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)

    await call.message.answer("–ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è –°–≤–∞—Ä–æ–æ–≥2022")


async def navigate_to_category(
    call: types.CallbackQuery,
    category,
    **kwargs # pylint: disable=unused-argument
    ):

    """–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ level 1

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """
    categories = {
        "what_now" : show_what_now,
        "what_next" : show_what_next,
        "full_shedule" : show_full_schedule,
        "result" : show_result_menu,
        "event" : show_event_menu,
        "team" : show_team_menu,
        "sm" : show_subscriptions_manager_menu,
        "map" : show_map,
        "share" : show_share,
        "about" : show_about
    }

    curent_category_function = categories[category]

    await curent_category_function(
        call,
        category = category
    )


async def navigate_to_subcategory(
    call: types.CallbackQuery,
    category,
    subcategory,
    **kwargs # pylint: disable=unused-argument
    ):

    """–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ level 2

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        subcategory ([type]): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
    """
    subcategories = {
        "festival_cup" : show_festival_cup_result,
        "holding_cup" : show_holding_cup_result,
        "sport_cup" : show_sport_cup_result,
        "tourism_cup" : show_tourism_cup_result,
        "culture_cup" : show_culture_cup_result,
        "sm_team" : show_subscriptions_manager_team,
        "sm_event" : show_subscriptions_manager_event
    }

    curent_subcategory_function = subcategories[subcategory]

    await curent_subcategory_function(
        call,
        category = category,
        subcategory = subcategory
    )


async def function_with_item(
    call: types.CallbackQuery,
    category:str,
    subcategory:str,
    action:str,
    item_id:str,
    **kwargs # pylint: disable=unused-argument
    ):

    """–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ —Ä–∞–±–æ—Ç–µ —Å item

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category (str): –≤—ã–±—Ä–∞–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        subcategory (str): –≤—ã–±—Ä–æ–Ω–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        action (str): –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏ –Ω–∞ item
        item_id (str): id —ç–ª–µ–º–µ–Ω—Ç–∞

    """

    await call.answer(cache_time=360)
    callback_data = call.data
    logging.info("callback_data='%s'", callback_data)
    user_id = call.from_user.id

    actions = {
        "show":show_item_info,
        "subscribe" : subscribe_to_item,
        "unsubscribe" : unsubscribe_to_item
    }

    curent_action_function = actions[action]

    await curent_action_function(
        call,
        user_id,
        subcategory,
        item_id
    )


async def show_item_info(
    call : types.CallbackQuery,
    category:str,
    item_id:str,
    **kwargs # pylint: disable=unused-argument
    ):

    """–í–æ–∑–≤—Ä–∞—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—É—Ä—Å–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category (str): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        item_id (str): id –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
    TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è" –∏ "–Ω–∞–∑–∞–¥"
    """

    if category == "event":
        event_info = get_event_info(int(item_id))
        await call.message.answer(
            text=f"----{event_info['name']}---\n"
            f"{event_info['type']}\n\n"
            f"–ö–æ—ç—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: {event_info['coefficient']}\n\n"
            f"–°–æ—Å—Ç–∞–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥:\n{event_info['composition']}\n\n"
            f"–í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:\n{event_info['time_start']}\n\n"
            f"–ü—Ä–∞–≤–∏–ª–∞ –∫–æ–Ω–∫—É—Ä—Å–∞:\n{event_info['rule']}"
        )
    else:
        team_info = get_team_info(int(item_id))
        if team_info['holding'] is True:
            holding_text = "–ö–æ–º–∞–Ω–¥–∞ –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ —Ö–æ–ª–¥–∏–Ω–≥–∞ –ë–ú–ö"
        else:
            holding_text = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–∞–≤ —Ö–æ–ª–¥–∏–Ω–≥–∞ –ë–ú–ö"
        await call.message.answer(
            text=f"---{team_info['name']}\n"
            f"{holding_text}"
        )


async def subscribe_to_item(
    call: types.CallbackQuery,
    user_id:int,
    subcategory:str,
    item_id:str,
    **kwargs # pylint: disable=unused-argument
    ):

    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id (int): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category (str): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        item_id (str): id –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
    """

    if subcategory == "sm_event":
        set_sign_to_event(int(user_id), int(item_id))
        await call.message.answer(
            text="–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        )
    elif subcategory == "sm_team":
        set_sign_to_team(int(user_id), int(item_id))
        await call.message.answer(
            text="–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        )
    else:
        await call.message.answer(
            text="–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
        )


async def unsubscribe_to_item(
    call: types.CallbackQuery,
    user_id:int,
    subcategory:str,
    item_id:str,
    **kwargs # pylint: disable=unused-argument
    ):

    """–û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id (int): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        category (str): –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        item_id (str): id –∫–æ–Ω–∫—É—Ä—Å–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã
    """

    if subcategory == "sm_event":
        set_unsing_to_event(int(user_id), int(item_id))
        await call.message.answer(
            text="–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        )
    elif subcategory == "sm_team":
        set_unsing_to_team(int(user_id), int(item_id))
        await call.message.answer(
            text="–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"
        )
    else:
        await call.message.answer(
            text="–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫"
        )


@dp.callback_query_handler(main_menu_cb.filter())
async def navigate_to_level(
    call: types.CallbackQuery,
    callback_data: dict
    ):

    """–û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ level 0

    Args:
        call (types.CallbackQuery): callback_data –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        callback_data (dict): —Å–ª–æ–≤–∞—Ä—å callback_data
    """

    curent_level = callback_data.get("level")
    category = callback_data.get("category")
    subcategory = callback_data.get("subcategory")
    action = callback_data.get("action")
    item_id = callback_data.get("item_id")

    levels = {
        "0" : show_main_menu,
        "1" : navigate_to_category,
        "2" : navigate_to_subcategory,
        "3" : function_with_item
    }

    curent_level_function = levels[curent_level]

    await curent_level_function(
        call,
        category = category,
        subcategory = subcategory,
        action = action,
        item_id = item_id
        )
