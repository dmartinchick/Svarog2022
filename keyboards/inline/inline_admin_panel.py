"""–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.inline.callback_datas import make_callback_data_ap, make_callback_data_ap_events

async def admin_panel_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    markup = InlineKeyboardMarkup(
        row_width=1
    )
    to_do_list = [
        {'name':"üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", 'to_do_item':"add_result"},
        {'name': "–û—á–∏—Å—Ç–∏—Ç—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—Ä—É—Å–∞", 'to_do_item':"claer_result"},
        {'name':"‚úè –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã", 'to_do_item':"change_result"},
        {'name':"–î–æ–±–∞–≤–∏—Ç—å —à—Ç—Ä–∞—Ñ", 'to_do_item':"set_fol"},
        {'name':"üïë –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", 'to_do_item':"changing_shedule"},
        {'name':"‚ö° –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 'to_do_item':"emergency_message"}
    ]

    for to_do in to_do_list:
        markup.insert(
            InlineKeyboardButton(
                text=to_do['name'],
                callback_data=make_callback_data_ap(
                    to_do=to_do['to_do_item'])
            )
        )
    return markup

async def ap_event_keyboard(
    events_list:list,
    results_list:list = None,
    to_do = "0") -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏—Ç—É—Ä—É —Å–æ–±—ã—Ç–∏–π

    Args:
        events_list (list): —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
        results_list (list, optional): —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π. Defaults to None.
        to_do (str, optional): —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å –∫–æ–Ω–∫—É—Ä—Å–æ–º. Defaults to "0".

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏—Ç—É—Ä–∞ —Å–æ–±—ã—Ç–∏–π
    TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """

    markup = InlineKeyboardMarkup(row_width=1)
    for event in events_list:
        if event['item_id'] in results_list:
            markup.insert(
                InlineKeyboardButton(
                    text="‚úÖ    " + event['name'],
                    callback_data = make_callback_data_ap(
                        to_do = to_do,
                        event_id = event['item_id']
                    )
                )
            )
        else:
            markup.insert(
                InlineKeyboardButton(
                    text="üìù    " + event['name'],
                    callback_data = make_callback_data_ap_events(
                        to_do=to_do,
                        event_id = event['item_id']
                    )
                )
            )
    markup.insert(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_ap()
        )
    )
    return markup




async def ap_chcek_result() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–≤–µ–¥–µ–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    Returns:
        InlineKeyboardMarkup: [description]
    """
    markup = InlineKeyboardMarkup(row_width=1)
    to_do = [
        {'name':"–í—Å–µ –≤–µ—Ä–Ω–æ", 'to_do':"save"},
        {'name':"–Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ",'to_do':"repeat"}
    ]
    for item in to_do:
        markup.insert(
            InlineKeyboardButton(
                text=item['name'],
                callback_data=make_callback_data_ap(
                    to_do=item['to_do']
                )
            )
        )
    return markup
