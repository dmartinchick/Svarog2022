"""–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from utils.db_api.db_comands import get_events_list, get_signed_events_list
from utils.db_api.db_comands import get_signed_teams_list, get_teams_list

from keyboards.inline.callback_datas import make_callback_data_mm


async def main_menu_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    """
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    curent_level = 0
    markup = InlineKeyboardMarkup(
        row_width=1
    )
    categories = [
        {'name':"üîé –ß—Ç–æ —Å–µ–π—á–∞—Å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç", 'category_item':"what_now"},
        {'name':"üîé –ë–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",'category_item':"what_next"},
        {'name':"üìÖ –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",'category_item':"full_shedule"},
        {'name':"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã",'category_item':"result"},
        {'name':"ü§º –ö–æ–Ω–∫—É—Ä—Å—ã",'category_item':"event"},
        {'name':"üö© –ö–æ–º–∞–Ω–¥—ã",'category_item':"team"},
        # {'name':"‚öô –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫",'category_item':"sm"},
        {'name':"üó∫ –ö–∞—Ä—Ç–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",'category_item':"map"},
        {'name':"ü§≥ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π",'category_item':"share"},
        {'name':"üìú –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è",'category_item':"about"}
    ]
    for category in categories:
        button_text = category['name']
        button_callback_data = make_callback_data_mm(
            level=curent_level + 1,
            category=category['category_item'])
        markup.insert(
            InlineKeyboardButton(
                text=button_text,
                callback_data=button_callback_data)
        )
    return markup


async def back_to_main_keyboard() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π What_now, what_next,
        full_schedule, map, share, about

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–∫–æ–π '–ù–∞–∑–∞–¥'
    """
    curent_level = 1
    markup = InlineKeyboardMarkup(
        row_width=1
    )
    markup.insert(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level=curent_level - 1
            )
        )
    )
    return markup


async def result_keyboard(category:str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    Args:
        category (str): —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã'

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    """
    curent_level = 1
    markup = InlineKeyboardMarkup(
        row_width = 1
    )
    result_subcategories = [
        {'name' : "–ö—É–±–æ–∫ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è", 'subcategory' : "festival_cup"},
        {'name' : "–ö—É–±–æ–∫ —Ö–æ–ª–¥–∏–Ω–≥–∞", 'subcategory' : "holding_cup"},
        {'name' : "–ö—É–±–æ–∫ —Ç—É—Ä–∏–∑–º–∞", 'subcategory' : "tourism_cup"},
        {'name' : "–ö—É–±–æ–∫ —Å–ø–æ—Ä—Ç–∞", 'subcategory' : "sport_cup"},
        {'name' : "–ö—É–±–æ–∫ –∫—É–ª—å—Ç—É—Ä—ã", 'subcategory': "culture_cup"},
    ]
    for subcategory in result_subcategories:
        button_text = subcategory['name']
        button_callback_data = make_callback_data_mm(
            level = curent_level + 1,
            category = category,
            subcategory = subcategory['subcategory'])
        markup.insert(
            InlineKeyboardButton(
                text=button_text,
                callback_data=button_callback_data
            )
        )
    markup.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level = curent_level-1)
        )
    )
    return markup


async def event_keyboard(category:str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–æ–≤

    Args:
        category (str): —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–ö–æ–Ω–∫—É—Ä—Å—ã'

    Returns:
        markup[InlineKeyboardMarkup]: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ c–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω–∫—É—Ä—Å–æ–≤
    """
    curent_level = 1
    markup = InlineKeyboardMarkup(
        row_width=1
    )
    events = get_events_list()
    for event in events:
        button_text = event['name']
        button_callback_data = make_callback_data_mm(
            level= curent_level + 2, # +2, —Ç.–∫. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–≤–æ–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            category=category,
            action="show",
            item_id=event["item_id"]
        )
        markup.insert(
            InlineKeyboardButton(
                text=button_text,
                callback_data=button_callback_data
            )
        )
    markup.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level=curent_level - 1
            )
        )
    )
    return markup


async def team_keyboard(category:str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é –∫–æ–º–∞–Ω–¥

    Args:
        category (str): —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–ö–æ–º–∞–Ω–¥—ã'

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥
    """
    curent_level = 1
    markup = InlineKeyboardMarkup(
        row_width=2
    )
    teams = get_teams_list()
    for team in teams:
        button_text = team['name']
        button_callback_data = make_callback_data_mm(
            level=curent_level + 2, # +2, —Ç.–∫. –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –≤—ã–≤–æ–¥—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            category= category,
            action="show",
            item_id=team["item_id"]
        )
        markup.insert(
            InlineKeyboardButton(
                text=button_text,
                callback_data=button_callback_data
            )
        )
    markup.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level = curent_level - 1
            )
        )
    )
    return markup


async def subscriptions_manager_keyboard(category:str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫

    Args:
        category (str): —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–¥–ø–∏—Å–æ–∫'

    Returns:
        InlineKeyboardMarkup: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    curent_level = 1
    markup = InlineKeyboardMarkup(
        row_width=1
    )
    subscriptions_manager_subcategories= [
        {'name':"–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã",'subcategory':"sm_team"},
        {'name':"–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å—ã",'subcategory':"sm_event"}
    ]
    for subcategory in subscriptions_manager_subcategories:
        button_text=subcategory['name']
        button_callback_data = make_callback_data_mm(
            level=curent_level + 1,
            category=category,
            subcategory=subcategory['subcategory']
        )
        markup.insert(
            InlineKeyboardButton(
                text=button_text,
                callback_data=button_callback_data
            )
        )
    markup.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level = curent_level - 1
            )
        )
    )
    return markup


async def sm_item_keyboard(category:str, subcategory:str, user_id:int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞–º–∏. \
        –ö–æ–Ω–∫—É—Ä—Å—ã –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–µ—á–∞—é—Ç—Å—è —Å–ø–µ—Ü–∏—Ñ–∞–ª—å–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º

    Args:
        category (str): —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        subcategory (str): —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        user_id (int): id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
    """
    curent_level = 2
    markup = InlineKeyboardMarkup(
        row_width=2
    )
    if subcategory == "sm_event":
        items_list = get_events_list()
        signed_items_list = get_signed_events_list(user_id)
    elif subcategory == "sm_team":
        items_list = get_teams_list()
        signed_items_list = get_signed_teams_list(user_id)
    else:
        print(">>>> sm_itemskeyboard: –ß–¢–û-–¢–û –ü–û–®–õ–û –ù–ï –¢–ê–ö!!!")

    for item in items_list:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ item –≤ signed_items_list
        # –ï—Å–ª–∏ –¥–∞ —Ç–æ –∫ —Ç–µ–∫—Å—Ç—É –¥–æ–±–∞–≤–ª—è–µ–º —Å–º–∞–π–ª, –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–π callback
        if item in signed_items_list:
            button_text = f"‚úÖ {item['name']}"
            button_callback_data = make_callback_data_mm(
                level=curent_level + 1,
                category=category,
                subcategory=subcategory,
                action="unsubscribe",
                item_id = item['item_id']
            )
        else:
            button_text = item['name']
            button_callback_data = make_callback_data_mm(
                level=curent_level + 1,
                category=category,
                subcategory=subcategory,
                action="subscribe",
                item_id=item['item_id']
            )

        markup.insert(
            InlineKeyboardButton(
                text=button_text,
                callback_data=button_callback_data
            )
        )

    markup.row(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level=curent_level -1,
                category=category,
                subcategory=subcategory
            )
        )
    )

    return markup


async def back_item_keyboard(category:str) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π event, team

    Args:
        category (str): —Ä–∞–∑–¥–µ–ª –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é

    Returns:
        InlineKeyboardMarkup: –∫–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥'
    """
    markup = InlineKeyboardMarkup(
        row_width=1
    )
    curent_level = 3

    markup.insert(
        InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥",
            callback_data=make_callback_data_mm(
                level= curent_level - 2,
                category=category
            )
        )
    )
    return markup
